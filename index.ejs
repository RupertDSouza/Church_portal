<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>File Upload</title>
    <style>
      body {
        display: flex;
        height: 100vh;
        margin: 0;
        font-family: Arial, sans-serif;
      }
      .container {
        display: flex;
        width: 100%;
      }
      .form-section,
      .display-section {
        flex: 1;
        padding: 20px;
        box-sizing: border-box;
      }
      .form-section {
        border-right: 1px solid #ccc;
      }
      .display-section {
        overflow-y: auto;
      }
      #response {
        white-space: pre-wrap;
        word-wrap: break-word;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="form-section">
        <form id="myForm" method="post">
          <label for="wardName">Name:</label>
          <input type="text" name="wardName" id="wardName" required />
          <br /><br />
          <label for="image">Choose a file:</label>
          <input type="file" name="image" id="image" />
          <br /><br />
          <label for="details">Details:</label>
          <input type="text" name="details" id="details" required />
          <label for="place">Place:</label>
          <input type="text" name="place" id="place" required />
          <br /><br />
          <input type="submit" value="Submit" />
        </form>
      </div>
      <div class="display-section">
        <h2>Submission Result:</h2>
        <div id="response"></div>
      </div>
    </div>

    <script>
      document
        .getElementById("myForm")
        .addEventListener("submit", async function (event) {
          event.preventDefault();

          const formData = new FormData(event.target);

          try {
            const response = await fetch("/app/ward/create", {
              method: "POST",
              headers: {
                Authorization:
                  "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NjhmMDc5MTA1NDU1ODQ4ZmI5MWI5ZGMiLCJpYXQiOjE3MjE4Mjk5ODcsImV4cCI6MTcyMTgzMzU4N30.MmOp2k-2ZGZVdQzpt0bBmoQYBO7ifRLUikiNuZ_LIso",
              },
              body: formData,
            });

            if (!response.ok) {
              throw new Error(
                "Network response was not ok " + response.statusText
              );
            }

            await displayResults();
          } catch (error) {
            console.error("Error:", error);
            document.getElementById("response").innerText =
              "Error: " + error.message;
          }
        });

      async function displayResults() {
        try {
          const response = await fetch("/app/ward/read", {
            method: "GET",
          });

          if (!response.ok) {
            throw new Error(
              "Network response was not ok " + response.statusText
            );
          }

          const result = await response.json();
          const recent_res = result[result.length - 1];
          document.getElementById("response").innerText = JSON.stringify(
            recent_res,
            null,
            2
          );
          displayData(recent_res);
        } catch (error) {
          console.error("Error:", error);
          document.getElementById("response").innerText =
            "Error: " + error.message;
        }
      }

      function displayData(data) {
        const responseDiv = document.getElementById("response");

        // Clear any existing content
        responseDiv.innerHTML = "";

        // Create elements for each field
        const idElement = document.createElement("p");
        idElement.textContent = `ID: ${data._id}`;
        responseDiv.appendChild(idElement);

        const wardNameElement = document.createElement("p");
        wardNameElement.textContent = `Ward Name: ${data.wardName}`;
        responseDiv.appendChild(wardNameElement);

        const detailsElement = document.createElement("p");
        detailsElement.textContent = `Details: ${data.details}`;
        responseDiv.appendChild(detailsElement);

        if (data.image) {
          const imagePath = data.image.replace(/^.*\/public\//, "../");
          const imageElement = document.createElement("img");
          imageElement.src = imagePath;
          imageElement.alt = "Image";
          imageElement.style.maxWidth = "100%";
          responseDiv.appendChild(imageElement);
        }

        const placeElement = document.createElement("p");
        placeElement.textContent = `Place: ${data.place}`;
        responseDiv.appendChild(placeElement);

        // Optionally add more fields in a similar manner
      }

      // Load results initially
      displayResults();
    </script>
  </body>
</html>

<!-- app.post('/submit', async (req, res) => {
  try {
      const { name, addresses } = req.body;
      const newUser = new User({
          name,
          addresses: Object.values(addresses) // Convert the addresses object to an array
      });
      await newUser.save();
      res.status(200).send('User created successfully!');
  } catch (error) {
      res.status(500).send('Error saving user: ' + error.message);
  }
}); -->
