<html>
  <head>
    <title>Mass Timings</title>

    <link rel="stylesheet" href="/styles/style1.css" />
    <link rel="stylesheet" href="/styles/bootstrap1.min.css" />
  </head>
  <body class="crm_body_bg">
    <%- include('../handlebars/navbar') %>

    <section class="main_content dashboard_part">
      <div class="container-fluid g-0">
      <div class="row">
      <div class="col-lg-12 p-0">
      <div class="header_iner d-flex justify-content-between align-items-center">
        <%- include('../handlebars/mobileNav') %>
      <div class="sidebar_icon d-lg-none">
      <i class="ti-menu"></i>
      </div>
      <div >
     
        <form action="/admin/editChurchInfo">
            <input type="submit" value="Update Church Info" class="btn btn-secondary btn-lg" id="updateChurchInfo">
        </form>
      </div>
      
      <div class="header_right d-flex justify-content-between align-items-center">
      <div class="header_notification_warp d-flex align-items-center">
      <li>
      <a href="#" onclick="redirectToCreateMassTiming()">
         <img src="../images/interface_16374941.png" style="max-width:16%; margin-left:85%"> </a>
      </li>
      
      </div>
      <div class="profile_info">
        <img id="profileImage" src="" alt="Profile Image">
        <div class="profile_info_iner">
            <p id="role">Welcome!</p>
            <h5 id="name">User</h5>
        </div>
    </div>
      </div>
      </div>
      </div>
      </div>
      </div>

      <div class="main_content_iner">
        <div class="container-fluid plr_30 body_white_bg pt_30">
          <div class="row justify-content-center">
            <div class="col-12">
              <div class="QA_section">
                <div class="QA_table">
                  <table class="table lms_table_active">
                    <thead>
                      <tr>
                        <th scope="col">Day</th>
                        <th scope="col">Occassion</th>
                        <th scope="col">Date</th>
                        <th scope="col">Time</th>
                        <th scope="col"></th>
                      </tr>
                    </thead>
                    <tbody>
                      <!-- Table rows will be dynamically inserted here -->
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <div id="response"></div>

    <!-- Modal Background  -->
    <div id="confirmationModal" class="modal">
      <div class="modal-content">
        <span class="close" id="closeModal">&times;</span>
        <p>Are you sure you want to delete this user?</p>
        <button
          id="confirmDelete"
          class="btn btn-primary"
          style="margin-bottom: 10"
        >
          Yes
        </button>
        <button id="cancelDelete" class="btn btn-secondary">No</button>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/jwt-decode@3.1.2/build/jwt-decode.min.js"></script>

    <script src="/js/auth.js"></script>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        checkAuthAndFetchUserData((error, userData) => {
          if (error) {
            console.error("Authentication failed");
            return;
          }

          document.getElementById("profileImage").src = getImagePath(
            userData.image
          );
          document.getElementById("name").textContent = userData.name;
          document.getElementById(
            "role"
          ).textContent = `Welcome ${userData.role}!`;
        });
        displayResults();
      });

      async function displayResults() {
        try {
          const token = localStorage.getItem("token");
          const response = await fetch("/app/mass/read", {
            method: "GET",
            headers: {
              Authorization: `Bearer ${token}`,
            },
          });

          if (!response.ok) {
            throw new Error(
              "Network response was not ok " + response.statusText
            );
          }

          const massTimings = await response.json();
          const tableBody = document.querySelector(".lms_table_active tbody");

          // Clear existing table rows
          tableBody.innerHTML = "";

          massTimings.forEach((massTiming) => {
            // Check if info array exists and has elements
            if (massTiming.info && massTiming.info.length > 0) {
              massTiming.info.forEach((info) => {
                const row = document.createElement("tr");
                row.innerHTML = `
                        <td>${massTiming.day}</td>
                        <td>${info.occasion}</td>
                        <td>${new Date(info.date).toLocaleDateString()}</td>
                        <td>${info.time}</td>
                        <td>
                            <a href="#" class="status_btn edit-btn" data-id="${
                              massTiming._id
                            }" data-info-id="${
                  info._id
                }" style="text-decoration: none;">Edit</a>&nbsp;&nbsp;
                            <a href="#" class="status_btn delete-btn" data-id="${
                              massTiming._id
                            }" data-info-id="${
                  info._id
                }" style="text-decoration: none;">Delete</a>
                        </td>
                    `;
                tableBody.appendChild(row);
              });
            } else {
              // Handle case where info is empty or undefined
              const row = document.createElement("tr");
              row.innerHTML = `
                    <td>${massTiming.day}</td>
                    <td colspan="4">No mass information available</td>
                `;
              tableBody.appendChild(row);
            }
          });

                document.querySelectorAll('.delete-btn').forEach(button => {
                button.addEventListener('click', function (event) {
                    event.preventDefault();
                    const cardId = this.getAttribute('data-id');
                    showConfirmationModal(cardId);
                });
            });
                
                document.querySelectorAll('.edit-btn').forEach(button => {
                    button.addEventListener('click', function(event) {
                        event.preventDefault();
                        const rowId = this.getAttribute('data-id');
                        localStorage.setItem('editUserId', rowId);
                        window.location.href = '/admin/editUser';
                    });
                });
                
            } catch (error) {
                console.error("Error:", error);
                document.getElementById("response").innerText = "Error: " + error.message;
            }
        }
        
        function getImagePath(image) {
            if (image) {
                
                return image.replace("../../Church_portal/public/", "/");
            }
            return ""; 
        }
        function showConfirmationModal(cardId) {
        const modal = document.getElementById("confirmationModal");
        modal.style.display = "block";

        const confirmButton = document.getElementById("confirmDelete");
        const closeButton = document.getElementById("closeModal");
        const cancelButton = document.getElementById("cancelDelete");

        confirmButton.onclick = async function () {
          await deleteCard(cardId);
          modal.style.display = "none";
        };

        closeButton.onclick = function () {
          modal.style.display = "none";
        };

        cancelButton.onclick = function () {
          modal.style.display = "none";
        };
      }

      async function deleteCard(cardId) {
        const token = localStorage.getItem("token");
        if (!token) {
          alert("Please login first");
          return;
        }

        try {
          const response = await fetch(`/app/user/delete/${cardId}`, {
            method: "DELETE",
            headers: {
              Authorization: `Bearer ${token}`,
            },
          });

          if (!response.ok) {
            throw new Error(
              "Network response was not ok " + response.statusText
            );
          }

          const row = document
            .querySelector(`[data-id='${cardId}']`)
            .closest("tr");
          if (row) {
            row.remove();
          }

          // Optionally, you can show a success message
          document.getElementById("response").innerText =
            "User deleted successfully";
        } catch (error) {
          console.error("Error:", error);
          const responseElement = document.getElementById("response");
          if (responseElement) {
            responseElement.innerText = "Error: " + error.message;
          }
        }
    }
        
        function redirectToCreateUsers() {
                window.location.href = '/admin/createUser';
            }
        document.getElementById('updateChurchInfo').addEventListener('click', () => {
            window.location.href = '/admin/editChurchInfo';
    });
</script>
</body>
</html>
