<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>File Upload</title>
    <style>
      body {
        display: flex;
        height: 100vh;
        margin: 0;
        font-family: Arial, sans-serif;
      }
      .container {
        display: flex;
        width: 100%;
      }
      .form-section,
      .display-section {
        flex: 1;
        padding: 20px;
        box-sizing: border-box;
      }
      .form-section {
        border-right: 1px solid #ccc;
      }
      .display-section {
        overflow-y: auto;
      }
      #response {
        white-space: pre-wrap;
        word-wrap: break-word;
      }
      .data-button {
        display: block;
        margin-bottom: 10px;
        padding: 10px;
        border: 1px solid #ccc;
        background-color: #f0f0f0;
        cursor: pointer;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="form-section">
        <h2>All Wards</h2>
        <div id="allResponse"></div>
        <form id="myForm" method="post">
          <input type="hidden" name="id" id="wardId" />
          <label for="wardName">Name:</label>
          <input type="text" name="wardName" id="wardName" required />
          <br /><br />
          <label for="image">Choose a file:</label>
          <input type="file" name="image" id="image" />
          <br /><br />
          <label for="details">Details:</label>
          <input type="text" name="details" id="details" required />
          <label for="place">Place:</label>
          <input type="text" name="place" id="place" required />
          <br /><br />
          <input type="submit" value="Submit" />
          <input type="button" value="Update" onclick="updateWard()" />
        </form>
      </div>
      <div class="display-section">
        <h2>Submission Result:</h2>
        <div id="response"></div>
      </div>
    </div>

    <script>
      document
        .getElementById("myForm")
        .addEventListener("submit", async function (event) {
          event.preventDefault();
          const formData = new FormData(event.target);
          await submitWard(formData, "Submit");
        });

      async function submitWard(formData, action) {
        try {
          const response = await fetch("/app/ward/create", {
            method: "POST",
            headers: {
              Authorization:
                "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NjhmMDc5MTA1NDU1ODQ4ZmI5MWI5ZGMiLCJpYXQiOjE3MjE4Mjk5ODcsImV4cCI6MTcyMTgzMzU4N30.MmOp2k-2ZGZVdQzpt0bBmoQYBO7ifRLUikiNuZ_LIso",
            },
            body: formData,
          });

          if (!response.ok) {
            throw new Error(
              "Network response was not ok " + response.statusText
            );
          }

          await displayResults(action);
        } catch (error) {
          console.error("Error:", error);
          document.getElementById("response").innerText =
            "Error: " + error.message;
        }
      }

      async function updateWard() {
        const formData = new FormData(document.getElementById("myForm"));
        const id = document.getElementById("wardId").value;
        try {
          const response = await fetch(`/app/ward/update/${id}`, {
            method: "PUT",
            headers: {
              Authorization:
                "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NjhmMDc5MTA1NDU1ODQ4ZmI5MWI5ZGMiLCJpYXQiOjE3MjE5MTYwNzEsImV4cCI6MTcyMTkxOTY3MX0.ePRr6hOyY0aYJoH3_7BxMuz90V-poRUEAtnST0sxG9Q",
            },
            body: formData,
          });

          if (!response.ok) {
            throw new Error(
              "Network response was not ok " + response.statusText
            );
          }

          await displayResults("Update");
        } catch (error) {
          console.error("Error:", error);
          document.getElementById("response").innerText =
            "Error: " + error.message;
        }
      }

      async function displayResults(action) {
        try {
          let url = "/app/ward/read";

          if (action === "Update") {
            const id = document.getElementById("wardId").value;
            url = `/app/ward/read/${id}`;
          }

          const response = await fetch(url, {
            method: "GET",
          });

          if (!response.ok) {
            throw new Error(
              "Network response was not ok " + response.statusText
            );
          }

          const result = await response.json();
          document.getElementById("allResponse").innerHTML = ""; // Clear previous buttons

          if (Array.isArray(result)) {
            result.forEach((item) => {
              const button = document.createElement("button");
              button.textContent = item.wardName;
              button.className = "data-button";
              button.addEventListener("click", () => fillForm(item));
              document.getElementById("allResponse").appendChild(button);
            });

            if (action === "Submit") {
              const recent_res = result[result.length - 1];
              document.getElementById("response").innerText = JSON.stringify(
                recent_res,
                null,
                2
              );
              displayData(recent_res);
            }
          } else if (action === "Update") {
            document.getElementById("response").innerText = JSON.stringify(
              result,
              null,
              2
            );
            displayData(result);
          }
        } catch (error) {
          console.error("Error:", error);
          document.getElementById("response").innerText =
            "Error: " + error.message;
        }
      }

      function fillForm(data) {
        document.getElementById("wardId").value = data._id;
        document.getElementById("wardName").value = data.wardName;
        document.getElementById("details").value = data.details;
        document.getElementById("place").value = data.place;
      }

      function displayData(data) {
        const responseDiv = document.getElementById("response");

        // Clear any existing content
        responseDiv.innerHTML = "";

        // Create elements for each field
        const idElement = document.createElement("p");
        idElement.textContent = `ID: ${data._id}`;
        responseDiv.appendChild(idElement);

        const wardNameElement = document.createElement("p");
        wardNameElement.textContent = `Ward Name: ${data.wardName}`;
        responseDiv.appendChild(wardNameElement);

        const detailsElement = document.createElement("p");
        detailsElement.textContent = `Details: ${data.details}`;
        responseDiv.appendChild(detailsElement);

        if (data.image) {
          const imagePath = data.image.replace(/^.*\/public\//, "../");
          const imageElement = document.createElement("img");
          imageElement.src = imagePath;
          imageElement.alt = "Image";
          imageElement.style.maxWidth = "100%";
          responseDiv.appendChild(imageElement);
        }

        const placeElement = document.createElement("p");
        placeElement.textContent = `Place: ${data.place}`;
        responseDiv.appendChild(placeElement);

        // Optionally add more fields in a similar manner
      }

      // No call to displayResults() here to prevent initial load display
      displayResults();
    </script>
  </body>
</html>
